library("swirl")
library("swirl")
swirl()
install.packages("swirl")
library("swirl")
swirl()
swirl()
library(swirl)
install_course("C:\Users\zhuj7\Documents\swirl_courses-master\swirl_courses-master",multi=TRUE,which_course="R_programming")
install_course("C:/Users/zhuj7/Documents/swirl_courses-master/swirl_courses-master",multi=TRUE,which_course="R_programming")
add2 <- function(x,y)
swirl()}
add2 <- function(x,y) {
x+y
}
add2(3,4)
above <- function(x,n) {
use <- x>n
x[use]
}
x<-1:20
above(x,10)
makecov <- function(rho,n) {
m <- matrix(nrow=n,ncol=n)
m <- ifelst(row(m) == col(m),1,rho)
return(m)
}
makecov(5,4)
makecov <- function(rho,n) {
+    m <- matrix(nrow=n,ncol=n)
+    m <- ifelse(row(m) == col(m),1,rho)
+    return(m)
+ }
makecov <- function(rho,n) {
+    m <- matrix(nrow=n,ncol=n)
+    m <- ifelse(row(m) == col(m),1,rho)
+    return(m)
+ }
makecov <- function(rho,n) {
m <- matrix(nrow=n,ncol=n)
m <- ifelse(row(m) == col(m),1,rho)
return(,)
}
makecov <- function(rho,n) {
+    m <- matrix(nrow=n,ncol=n)
+    m <- ifelse(row(m) == col(m),1,rho)
r
}
makecov <- function(rho,n) {
m <- matrix(nrow=n,ncol=n)
m <- ifelse(row(m) == col(m),1,rho)
return(m)
}
makecov(3,4)
z <- matrix(1:6,2)
z
z <- matrix(1:6,ncol=2)
z
apply(z,2,mean)
app;y(z,1,mean)
apply(z,1,mean)
colMeans(z)
rowMeans(z)
f <- function(x) x/c(2,8)
y <- apply(z,l,f)
y <- apply(z,1,f)
y
t(y)
source()
copymaj
copymaj <- function(rw,d) {
maj <- sum(rw[1:d])/d
return(if(maj > 0.5) 1 else 0)
}
x
y
z
x < matrix(or(1,0),nrow=4,ncol=5)
x <- matrix(or(1,0), nrow=4,ncol=5)
help(random)
??random
library(gdata)
package
help(package)
??package
find.package
x <- matrix(c(1:10),4)
x <- matrix(c(1:10),2)
x
x <- matrix(c(1:10), ncol=2)
x
x <- x[c(1,3),]
x
x <- rbind(x,x)
x
x <- x(-c[1,3],)
class(x)
attributes(x)
dim(x)
nrow
r <- x[c(1,3)]
r
r <- x[c(1,3),]
r
r <- x[2,]
r
r <- x[2,,drop=FALSE]
R
r
x[2,2]
"["(x,2,2)
u <- c(1,2,3)
u
v <- as.matrix(u)
v
colnames(x) <- c("a","b")
x
rownames(x) <- c("1","2","3","4")
x
q()
getwd()
install.pacages("swirl")
install.packages("swirl")
install.packages("xlsx")
swirl()
library("swirl")
swirl()
ls()
rm(list=ls())
swirl()
ls()
dir()
xlsx()
install.packages("xlsx")
source("xlsx")
source(xlsx)
library("xlsx")
install.packages("rJava")
install.packages("rJava")
install.packages("xlsxjars")
library("xlsx")
library("rJava")
library("xlsxjars")
library("xlsx")
install.packages(
"jinit")
x <- list(a = 1:4, b = 0.9)
x[3,4]
x[3]
x
x[1]
x[3]
x[[b]]
x$b
x[["b"]]
x[c(1,2)]
x[[1]][[3]]
x <- c(3,4,5,NA,6,NA)
bad <- is.na(x)
y <- x[!bad]
y
length(which(is.na))
length(which(is.na(x)))
which(!is.na(x))
y <- x[which(!is.na(x))]
y
if(x>3) {}
if(x>3) {10}
x <- c("a","b","c")
for(i in 1:3) { print(x[i])}
for(i in seq_along(x)) {print(x[i])}
for(letter in x) {print(letter)}
x <- matrix(1:6,3,2)
for(in in seq_len(nrow(x))) { for(j in seq_len(ncol(x))){print(x[i,j])}}
for(i in seq_len(nrow(x))) { for(j in seq_len(ncol(x))){print(x[i,j])}}
x
install.packages(ssize.fdr)
install.packages("ssize.fdr")
library("ssize.fdr")
ssize.fdr()
dir()
ssize.F()
des <- matrix(c(1,-1,0,0,1,-1), ncol=2,byrow=FALSE)
b <- c(1,-0.5)
df <- function(n) {3*n-2}
s <- -1,
a <- 0.05
pwr1 <- 0.8
p0 <- c(0.5,0.9,0.95,0.995)
N1 <- 20
s <- 1
ft <- ssize.F(X=des,beta=b,dn=df,sigma=s,fdr=a,power=pwr1,pi0=p0,maxN=N1)
ft$ssize
ft$power
ft$crit.vals
source("http://bioconductor.org/biocLite.R")
bioCLite()
getwd()
getwd()
q()
mean
args(paste)
paste
paste("a","b","c", sep=":")
search()
lm
q()
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library(XML)
balt <- xmlTreeParse(fileurl, useInternalNodes = T)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&h=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&h1=en"
html <- htmlTreeParse(url, useInternalNodes = T)
html <- htmlTreeParse(url, useInternalNodes = T)
search()
library()
install.packages("RMySQL")
library(RMySQL)
library(DBI)
uc <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
source("http:/bioconductor.org/biocLite.R")
source("http:/bioconductor.org/biocLite.R")
?"source"
install.packages("httr")
library(httr)
url
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
html <- GET(url)
google = handle("http://google.com")
pg = GET(handle = google, path="/")
install.packages("sqldf")
library(sqldf)
?"sqldf"
?"source"
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "wk2q2.csv")
acs <- load("wk2q2.csv")
list.files()
set.seed(13435)
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10),"var3"=sample(11:15))
x <- x[sample(1:5),]; x$var2[c(1,3)] = NA
x
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10),"var3"=sample(11:15))
x
set.seed(13435)
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10),"var3"=sample(11:15))
x
x <- x$var2[c(1,3)] = NA
x$var2[c(1,3)] = NA
x
x[,1]
x[,"var1"]
x[1:2,"var2"]
x[2][1:2]
x[2][2]
x[,2]
x[2,2]
x$var1 <=3
x[, x$var1 <=3]
x[x$var1 <= 3,]
x[x$var1 <= 3 & x$var2 != NA,]
x
x[x$var1 <= 3 & !is.na(x$var2),]
x[which(x$var2 > 8),]
sort(x$var1)
sort(x$var1, decreasing = T)
x[order(x$var1),]
install.packages("plyr")
library(plyr)
arrange(x, var1)
arrange(x, desc(var1))
x$var4 <- rnorm
x$var4 <- rnorm(5)
x
y <- cbind(rnorm)
y
y <- cbind(x, rnorm(5))
y
colnames(y)
names(y$`rnorm(5)`) = "var5"
y
names(y$rnorm(5)) = "var5"
names(y$var1) = "var"
names(y)
colnames(y)[5] <- "var5"
names(y)
names(y)[1] <- "test"
names(y)
setNames(y, names(y), letters[1:5])
letters[1:5]
y
setNames(y,letters[1:5])
setNames(y, "new")
y
y <- setNames(y,letters[1:5])
y
install.packages("httpuv")
library(httpuv)
?"httpuv"
x <- 10
y <- 25
if(x < y) {
print("statement is correct")
}
if(x < y) {
print("statement is correct")
} else {
print("statement is incorrect")
}
y <- 5
if(x < y) {
print("statement is correct")
} else {
print("statement is incorrect")
}
if(x < y) {
print("statement is correct")
} else {
print("statement is incorrect")
}
ifelse(x < 10), "statement is correct", "statement is incorrect"
ifelse(x < y, "statement is correct", "statement is incorrect")
for(i in 1:20) {}
for(i in 1:20) {print(i)}
for(i in 5:10) { j <- (i^2)-i, print(j)}
for(i in 5:10) { j <- (i^2)-i print(j)}
for(i in 5:10) { j <- (i^2)-i; print(j)}
for(i in 5:10) {
j <- (i^2)-i
print(j)
}
for(i in c("P","I","R")) { j <- i; paste(j,i)}
j <- as.character()
for(i in c("P","I","R")) { j <- i; paste(j,i)}
for(i in c("P","I","R")) { j <- as.character(); j <- paste(j,i)}
j
for(i in c("P","I","R")) { j <- as.character(); j <- paste(j,i), print(j)}
for(i in c("P","I","R")) { j <- as.character(); j <- paste(j,i); print(j)}
j <- "p"
i <- "i"
paste(j,i)
j <- as.character()
for(i in c("P","I","R")) { j <- paste(j,i); print(j)}
j <- as.character()
for(i in c("P","I","R")) { j <- paste(j,i)}
print(j)
for(i in c("P","I","R")) { j <- paste(j,i, sep = "")}
print(j)
for(i in c("P","I","R")) { j <- paste(j,i, sep = "")}
print(j)
for(i in c("P","I","R")) { m <- paste(m,i, sep = "")}
print(m)
x <- -10
for(i in c("P","I","R")) { j <- paste(j,i, sep = "")}
print(j)
while(x > -20) {
print(x)
x <- x - 1
}
for(i in c("P","I","R")) { j <- paste(j,i, sep = "")}
print(j)
while(x > -21) {
print(x)
x <- x - 1
}
h <- 10
j <- -5
for(i in c("P","I","R")) { j <- paste(j,i, sep = "")}
print(j)
while(x > -21) {
print(x)
x <- x - 1
}
if(h < j) {
print("statement is true")
} else {
while(h > j) {
print(h)
h <- h - 1
}
}
h = 10
j = -5
if(h < j) {
print("statement is true")
} else {
while(h > j) {
print(h)
h <- h - 1
}
}
if(h < j) {
print("statement is true")
} else {
while(h > j-1) {
print(h)
h <- h - 1
}
}
h = 10
j = -5
if(h < j) {
print("statement is true")
} else {
for(i in h:j-1) {
print(h)
h <- h - 1
}
}
AirPassengers
VADeaths
barplot(VADeaths)
boxplot(VADeaths)
hist(islands)
boxplot(len ~ dose, ToothGrowth, subset = supp=="VC")
ToothGrowth
islands
?pie
pie(1:15, col = rainbow(15))
pie(1:10, col = rainbow(10))
pie(1:10)
plot(cars)
cars
plot(len ~ dose, ToothGrowth, subset = supp=="VC")
line(len ~ dose, ToothGrowth, subset = supp=="VC")
trees
plot(trees$Girth, trees)
plot(trees$Girth, trees$Height)
plot(trees$Girth, trees$Height, type = l)
plot(trees$Girth, trees$Height, type = b)
plot(trees$Girth, trees$Height, type = "l")
plot(trees$Girth, trees$Height, type = "b")
airquality
names(airquality)
hist(airquality$Ozone, col = "green")
rug(airquality$Ozone)
boxplot(airquality)
boxplot(airquality$Ozone)
boxplot(airquality$Ozone, col = "blue")
hist(airquality$Ozone, col = "green", breaks = 10)
hist(airquality$Ozone, col = "green", breaks = 100)
hist(airquality$Ozone, col = "green", breaks = 50)
summary(airquality)
summary(airquality$Ozone)
hist(airquality$Ozone, col = "green", abline(v = median(airquality$Ozone),col("magenta", lwd =4)))
hist(airquality$Ozone, col = "green", abline(v = median(airquality$Ozone),col="magenta", lwd =4)))
hist(airquality$Ozone, col = "green", abline(v = median(airquality$Ozone),col="magenta", lwd =4))
hist(airquality$Ozone, col = "red")
abline(v = 12, lwd =2)
abline(v = median(airquality$Ozone), col = "magenta", lwd = 4)
hist(airquality$Ozone, col = "yellow")
abline(v = median(airquality$Ozone), col = "magenta", lwd = 4)
abline(v = 12, lwd =2)
abline(v = 31, lwd =2)
median(airquality$Ozone)
sum(is.na(airquality$Ozone))
median(airquality$Ozone, na.rm = T)
abline(v = median(airquality$Ozone, na.rm = T), col = "magenta", lwd = 4)
barplot(table)
barplot(airquality$Ozone)
names(airquality)
barplot(table(airquality$Month), col = "wheat", main = "month")
boxplot(Temp ~ Month, data = airquality, col = "green")
boxplot(Temp ~ Month, data = airquality, col = "green", main = "temp")
boxplot(Temp ~ Month, data = airquality, col = "green", main = "temp", xlab = "month")
boxplot(Temp ~ Month, data = airquality, col = "green", main = "temp", xlab = "month", ylab = "temp")
boxplot(Temp ~ Month, data = airquality, col = "green", main = "temp for each month", xlab = "month", ylab = "temp")
plot(airquality$Ozone, airquality$Month)
with(airquality, plot(Month, Ozone))
with(airquality, plot(Month, Ozone), col = "yellow")
summary(cars)
data(cars)
summary(airquality)
class(airquality$Month)
airquality <- transform(airquality, Month = factor(month))
airquality <- transform(airquality, Month = factor(Month))
class(airquality$Month)
airquality <- transform(airquality, Month = integer(Month))
airquality <- transform(airquality, Month = character(Month))
setwd("C:/Users/zhuj7/Desktop/Jun works/coursera/Data Science Specialization/5-Reproducible Research/RepData_PeerAssessment1")
zfile = 'activity.zip'
cfile = 'activity.csv'
if (file.exists(zfile) & !file.exists(cfile))
unzip(zfile, exdir = getwd())
dir()
activity = read.csv(cfile)
str(activity)
